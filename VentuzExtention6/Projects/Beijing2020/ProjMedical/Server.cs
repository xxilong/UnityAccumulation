/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace com.everythinghouse.movingtv
{
  public partial class Server {
    public interface ISync {
      bool Walker_OpenAsync();
      bool Walker_IsOpened();
      bool Walker_Close();
      bool Walker_SetDesPosition(double percentage);
      double Walker_GetCurPosition();
      bool RangeFinder_Open();
      bool RangeFinder_Close();
      bool RangeFinder_SetStartPosition(double pos);
      bool RangeFinder_SetEndPosition(double pos);
      double RangeFinder_GetPosition();
      double RangeFinder_GetNormalizedPosition();
    }

    public interface Iface : ISync {
      #if SILVERLIGHT
      IAsyncResult Begin_Walker_OpenAsync(AsyncCallback callback, object state);
      bool End_Walker_OpenAsync(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Walker_IsOpened(AsyncCallback callback, object state);
      bool End_Walker_IsOpened(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Walker_Close(AsyncCallback callback, object state);
      bool End_Walker_Close(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Walker_SetDesPosition(AsyncCallback callback, object state, double percentage);
      bool End_Walker_SetDesPosition(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_Walker_GetCurPosition(AsyncCallback callback, object state);
      double End_Walker_GetCurPosition(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_RangeFinder_Open(AsyncCallback callback, object state);
      bool End_RangeFinder_Open(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_RangeFinder_Close(AsyncCallback callback, object state);
      bool End_RangeFinder_Close(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_RangeFinder_SetStartPosition(AsyncCallback callback, object state, double pos);
      bool End_RangeFinder_SetStartPosition(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_RangeFinder_SetEndPosition(AsyncCallback callback, object state, double pos);
      bool End_RangeFinder_SetEndPosition(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_RangeFinder_GetPosition(AsyncCallback callback, object state);
      double End_RangeFinder_GetPosition(IAsyncResult asyncResult);
      #endif
      #if SILVERLIGHT
      IAsyncResult Begin_RangeFinder_GetNormalizedPosition(AsyncCallback callback, object state);
      double End_RangeFinder_GetNormalizedPosition(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_Walker_OpenAsync(AsyncCallback callback, object state)
      {
        return send_Walker_OpenAsync(callback, state);
      }

      public bool End_Walker_OpenAsync(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Walker_OpenAsync();
      }

      #endif

      public bool Walker_OpenAsync()
      {
        #if !SILVERLIGHT
        send_Walker_OpenAsync();
        return recv_Walker_OpenAsync();

        #else
        var asyncResult = Begin_Walker_OpenAsync(null, null);
        return End_Walker_OpenAsync(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Walker_OpenAsync(AsyncCallback callback, object state)
      #else
      public void send_Walker_OpenAsync()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Walker_OpenAsync", TMessageType.Call, seqid_));
        Walker_OpenAsync_args args = new Walker_OpenAsync_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_Walker_OpenAsync()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Walker_OpenAsync_result result = new Walker_OpenAsync_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Walker_OpenAsync failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Walker_IsOpened(AsyncCallback callback, object state)
      {
        return send_Walker_IsOpened(callback, state);
      }

      public bool End_Walker_IsOpened(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Walker_IsOpened();
      }

      #endif

      public bool Walker_IsOpened()
      {
        #if !SILVERLIGHT
        send_Walker_IsOpened();
        return recv_Walker_IsOpened();

        #else
        var asyncResult = Begin_Walker_IsOpened(null, null);
        return End_Walker_IsOpened(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Walker_IsOpened(AsyncCallback callback, object state)
      #else
      public void send_Walker_IsOpened()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Walker_IsOpened", TMessageType.Call, seqid_));
        Walker_IsOpened_args args = new Walker_IsOpened_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_Walker_IsOpened()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Walker_IsOpened_result result = new Walker_IsOpened_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Walker_IsOpened failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Walker_Close(AsyncCallback callback, object state)
      {
        return send_Walker_Close(callback, state);
      }

      public bool End_Walker_Close(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Walker_Close();
      }

      #endif

      public bool Walker_Close()
      {
        #if !SILVERLIGHT
        send_Walker_Close();
        return recv_Walker_Close();

        #else
        var asyncResult = Begin_Walker_Close(null, null);
        return End_Walker_Close(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Walker_Close(AsyncCallback callback, object state)
      #else
      public void send_Walker_Close()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Walker_Close", TMessageType.Call, seqid_));
        Walker_Close_args args = new Walker_Close_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_Walker_Close()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Walker_Close_result result = new Walker_Close_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Walker_Close failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Walker_SetDesPosition(AsyncCallback callback, object state, double percentage)
      {
        return send_Walker_SetDesPosition(callback, state, percentage);
      }

      public bool End_Walker_SetDesPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Walker_SetDesPosition();
      }

      #endif

      public bool Walker_SetDesPosition(double percentage)
      {
        #if !SILVERLIGHT
        send_Walker_SetDesPosition(percentage);
        return recv_Walker_SetDesPosition();

        #else
        var asyncResult = Begin_Walker_SetDesPosition(null, null, percentage);
        return End_Walker_SetDesPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Walker_SetDesPosition(AsyncCallback callback, object state, double percentage)
      #else
      public void send_Walker_SetDesPosition(double percentage)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Walker_SetDesPosition", TMessageType.Call, seqid_));
        Walker_SetDesPosition_args args = new Walker_SetDesPosition_args();
        args.Percentage = percentage;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_Walker_SetDesPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Walker_SetDesPosition_result result = new Walker_SetDesPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Walker_SetDesPosition failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Walker_GetCurPosition(AsyncCallback callback, object state)
      {
        return send_Walker_GetCurPosition(callback, state);
      }

      public double End_Walker_GetCurPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Walker_GetCurPosition();
      }

      #endif

      public double Walker_GetCurPosition()
      {
        #if !SILVERLIGHT
        send_Walker_GetCurPosition();
        return recv_Walker_GetCurPosition();

        #else
        var asyncResult = Begin_Walker_GetCurPosition(null, null);
        return End_Walker_GetCurPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Walker_GetCurPosition(AsyncCallback callback, object state)
      #else
      public void send_Walker_GetCurPosition()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Walker_GetCurPosition", TMessageType.Call, seqid_));
        Walker_GetCurPosition_args args = new Walker_GetCurPosition_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public double recv_Walker_GetCurPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Walker_GetCurPosition_result result = new Walker_GetCurPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Walker_GetCurPosition failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RangeFinder_Open(AsyncCallback callback, object state)
      {
        return send_RangeFinder_Open(callback, state);
      }

      public bool End_RangeFinder_Open(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RangeFinder_Open();
      }

      #endif

      public bool RangeFinder_Open()
      {
        #if !SILVERLIGHT
        send_RangeFinder_Open();
        return recv_RangeFinder_Open();

        #else
        var asyncResult = Begin_RangeFinder_Open(null, null);
        return End_RangeFinder_Open(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RangeFinder_Open(AsyncCallback callback, object state)
      #else
      public void send_RangeFinder_Open()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RangeFinder_Open", TMessageType.Call, seqid_));
        RangeFinder_Open_args args = new RangeFinder_Open_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_RangeFinder_Open()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RangeFinder_Open_result result = new RangeFinder_Open_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RangeFinder_Open failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RangeFinder_Close(AsyncCallback callback, object state)
      {
        return send_RangeFinder_Close(callback, state);
      }

      public bool End_RangeFinder_Close(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RangeFinder_Close();
      }

      #endif

      public bool RangeFinder_Close()
      {
        #if !SILVERLIGHT
        send_RangeFinder_Close();
        return recv_RangeFinder_Close();

        #else
        var asyncResult = Begin_RangeFinder_Close(null, null);
        return End_RangeFinder_Close(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RangeFinder_Close(AsyncCallback callback, object state)
      #else
      public void send_RangeFinder_Close()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RangeFinder_Close", TMessageType.Call, seqid_));
        RangeFinder_Close_args args = new RangeFinder_Close_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_RangeFinder_Close()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RangeFinder_Close_result result = new RangeFinder_Close_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RangeFinder_Close failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RangeFinder_SetStartPosition(AsyncCallback callback, object state, double pos)
      {
        return send_RangeFinder_SetStartPosition(callback, state, pos);
      }

      public bool End_RangeFinder_SetStartPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RangeFinder_SetStartPosition();
      }

      #endif

      public bool RangeFinder_SetStartPosition(double pos)
      {
        #if !SILVERLIGHT
        send_RangeFinder_SetStartPosition(pos);
        return recv_RangeFinder_SetStartPosition();

        #else
        var asyncResult = Begin_RangeFinder_SetStartPosition(null, null, pos);
        return End_RangeFinder_SetStartPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RangeFinder_SetStartPosition(AsyncCallback callback, object state, double pos)
      #else
      public void send_RangeFinder_SetStartPosition(double pos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RangeFinder_SetStartPosition", TMessageType.Call, seqid_));
        RangeFinder_SetStartPosition_args args = new RangeFinder_SetStartPosition_args();
        args.Pos = pos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_RangeFinder_SetStartPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RangeFinder_SetStartPosition_result result = new RangeFinder_SetStartPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RangeFinder_SetStartPosition failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RangeFinder_SetEndPosition(AsyncCallback callback, object state, double pos)
      {
        return send_RangeFinder_SetEndPosition(callback, state, pos);
      }

      public bool End_RangeFinder_SetEndPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RangeFinder_SetEndPosition();
      }

      #endif

      public bool RangeFinder_SetEndPosition(double pos)
      {
        #if !SILVERLIGHT
        send_RangeFinder_SetEndPosition(pos);
        return recv_RangeFinder_SetEndPosition();

        #else
        var asyncResult = Begin_RangeFinder_SetEndPosition(null, null, pos);
        return End_RangeFinder_SetEndPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RangeFinder_SetEndPosition(AsyncCallback callback, object state, double pos)
      #else
      public void send_RangeFinder_SetEndPosition(double pos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RangeFinder_SetEndPosition", TMessageType.Call, seqid_));
        RangeFinder_SetEndPosition_args args = new RangeFinder_SetEndPosition_args();
        args.Pos = pos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_RangeFinder_SetEndPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RangeFinder_SetEndPosition_result result = new RangeFinder_SetEndPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RangeFinder_SetEndPosition failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RangeFinder_GetPosition(AsyncCallback callback, object state)
      {
        return send_RangeFinder_GetPosition(callback, state);
      }

      public double End_RangeFinder_GetPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RangeFinder_GetPosition();
      }

      #endif

      public double RangeFinder_GetPosition()
      {
        #if !SILVERLIGHT
        send_RangeFinder_GetPosition();
        return recv_RangeFinder_GetPosition();

        #else
        var asyncResult = Begin_RangeFinder_GetPosition(null, null);
        return End_RangeFinder_GetPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RangeFinder_GetPosition(AsyncCallback callback, object state)
      #else
      public void send_RangeFinder_GetPosition()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RangeFinder_GetPosition", TMessageType.Call, seqid_));
        RangeFinder_GetPosition_args args = new RangeFinder_GetPosition_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public double recv_RangeFinder_GetPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RangeFinder_GetPosition_result result = new RangeFinder_GetPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RangeFinder_GetPosition failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_RangeFinder_GetNormalizedPosition(AsyncCallback callback, object state)
      {
        return send_RangeFinder_GetNormalizedPosition(callback, state);
      }

      public double End_RangeFinder_GetNormalizedPosition(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_RangeFinder_GetNormalizedPosition();
      }

      #endif

      public double RangeFinder_GetNormalizedPosition()
      {
        #if !SILVERLIGHT
        send_RangeFinder_GetNormalizedPosition();
        return recv_RangeFinder_GetNormalizedPosition();

        #else
        var asyncResult = Begin_RangeFinder_GetNormalizedPosition(null, null);
        return End_RangeFinder_GetNormalizedPosition(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_RangeFinder_GetNormalizedPosition(AsyncCallback callback, object state)
      #else
      public void send_RangeFinder_GetNormalizedPosition()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("RangeFinder_GetNormalizedPosition", TMessageType.Call, seqid_));
        RangeFinder_GetNormalizedPosition_args args = new RangeFinder_GetNormalizedPosition_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public double recv_RangeFinder_GetNormalizedPosition()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        RangeFinder_GetNormalizedPosition_result result = new RangeFinder_GetNormalizedPosition_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RangeFinder_GetNormalizedPosition failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["Walker_OpenAsync"] = Walker_OpenAsync_Process;
        processMap_["Walker_IsOpened"] = Walker_IsOpened_Process;
        processMap_["Walker_Close"] = Walker_Close_Process;
        processMap_["Walker_SetDesPosition"] = Walker_SetDesPosition_Process;
        processMap_["Walker_GetCurPosition"] = Walker_GetCurPosition_Process;
        processMap_["RangeFinder_Open"] = RangeFinder_Open_Process;
        processMap_["RangeFinder_Close"] = RangeFinder_Close_Process;
        processMap_["RangeFinder_SetStartPosition"] = RangeFinder_SetStartPosition_Process;
        processMap_["RangeFinder_SetEndPosition"] = RangeFinder_SetEndPosition_Process;
        processMap_["RangeFinder_GetPosition"] = RangeFinder_GetPosition_Process;
        processMap_["RangeFinder_GetNormalizedPosition"] = RangeFinder_GetNormalizedPosition_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void Walker_OpenAsync_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Walker_OpenAsync_args args = new Walker_OpenAsync_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Walker_OpenAsync_result result = new Walker_OpenAsync_result();
        try
        {
          result.Success = iface_.Walker_OpenAsync();
          oprot.WriteMessageBegin(new TMessage("Walker_OpenAsync", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Walker_OpenAsync", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Walker_IsOpened_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Walker_IsOpened_args args = new Walker_IsOpened_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Walker_IsOpened_result result = new Walker_IsOpened_result();
        try
        {
          result.Success = iface_.Walker_IsOpened();
          oprot.WriteMessageBegin(new TMessage("Walker_IsOpened", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Walker_IsOpened", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Walker_Close_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Walker_Close_args args = new Walker_Close_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Walker_Close_result result = new Walker_Close_result();
        try
        {
          result.Success = iface_.Walker_Close();
          oprot.WriteMessageBegin(new TMessage("Walker_Close", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Walker_Close", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Walker_SetDesPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Walker_SetDesPosition_args args = new Walker_SetDesPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Walker_SetDesPosition_result result = new Walker_SetDesPosition_result();
        try
        {
          result.Success = iface_.Walker_SetDesPosition(args.Percentage);
          oprot.WriteMessageBegin(new TMessage("Walker_SetDesPosition", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Walker_SetDesPosition", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void Walker_GetCurPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Walker_GetCurPosition_args args = new Walker_GetCurPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Walker_GetCurPosition_result result = new Walker_GetCurPosition_result();
        try
        {
          result.Success = iface_.Walker_GetCurPosition();
          oprot.WriteMessageBegin(new TMessage("Walker_GetCurPosition", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("Walker_GetCurPosition", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RangeFinder_Open_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RangeFinder_Open_args args = new RangeFinder_Open_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RangeFinder_Open_result result = new RangeFinder_Open_result();
        try
        {
          result.Success = iface_.RangeFinder_Open();
          oprot.WriteMessageBegin(new TMessage("RangeFinder_Open", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("RangeFinder_Open", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RangeFinder_Close_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RangeFinder_Close_args args = new RangeFinder_Close_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RangeFinder_Close_result result = new RangeFinder_Close_result();
        try
        {
          result.Success = iface_.RangeFinder_Close();
          oprot.WriteMessageBegin(new TMessage("RangeFinder_Close", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("RangeFinder_Close", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RangeFinder_SetStartPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RangeFinder_SetStartPosition_args args = new RangeFinder_SetStartPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RangeFinder_SetStartPosition_result result = new RangeFinder_SetStartPosition_result();
        try
        {
          result.Success = iface_.RangeFinder_SetStartPosition(args.Pos);
          oprot.WriteMessageBegin(new TMessage("RangeFinder_SetStartPosition", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("RangeFinder_SetStartPosition", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RangeFinder_SetEndPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RangeFinder_SetEndPosition_args args = new RangeFinder_SetEndPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RangeFinder_SetEndPosition_result result = new RangeFinder_SetEndPosition_result();
        try
        {
          result.Success = iface_.RangeFinder_SetEndPosition(args.Pos);
          oprot.WriteMessageBegin(new TMessage("RangeFinder_SetEndPosition", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("RangeFinder_SetEndPosition", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RangeFinder_GetPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RangeFinder_GetPosition_args args = new RangeFinder_GetPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RangeFinder_GetPosition_result result = new RangeFinder_GetPosition_result();
        try
        {
          result.Success = iface_.RangeFinder_GetPosition();
          oprot.WriteMessageBegin(new TMessage("RangeFinder_GetPosition", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("RangeFinder_GetPosition", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void RangeFinder_GetNormalizedPosition_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        RangeFinder_GetNormalizedPosition_args args = new RangeFinder_GetNormalizedPosition_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        RangeFinder_GetNormalizedPosition_result result = new RangeFinder_GetNormalizedPosition_result();
        try
        {
          result.Success = iface_.RangeFinder_GetNormalizedPosition();
          oprot.WriteMessageBegin(new TMessage("RangeFinder_GetNormalizedPosition", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("RangeFinder_GetNormalizedPosition", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Walker_OpenAsync_args : TBase
    {

      public Walker_OpenAsync_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Walker_OpenAsync_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Walker_OpenAsync_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Walker_OpenAsync_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Walker_OpenAsync_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Walker_OpenAsync_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Walker_OpenAsync_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Walker_IsOpened_args : TBase
    {

      public Walker_IsOpened_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Walker_IsOpened_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Walker_IsOpened_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Walker_IsOpened_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Walker_IsOpened_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Walker_IsOpened_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Walker_IsOpened_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Walker_Close_args : TBase
    {

      public Walker_Close_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Walker_Close_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Walker_Close_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Walker_Close_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Walker_Close_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Walker_Close_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Walker_Close_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Walker_SetDesPosition_args : TBase
    {
      private double _percentage;

      public double Percentage
      {
        get
        {
          return _percentage;
        }
        set
        {
          __isset.percentage = true;
          this._percentage = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool percentage;
      }

      public Walker_SetDesPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case -1:
                if (field.Type == TType.Double) {
                  Percentage = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Walker_SetDesPosition_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.percentage) {
            field.Name = "percentage";
            field.Type = TType.Double;
            field.ID = -1;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Percentage);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Walker_SetDesPosition_args(");
        bool __first = true;
        if (__isset.percentage) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Percentage: ");
          __sb.Append(Percentage);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Walker_SetDesPosition_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Walker_SetDesPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Walker_SetDesPosition_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Walker_SetDesPosition_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Walker_GetCurPosition_args : TBase
    {

      public Walker_GetCurPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Walker_GetCurPosition_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Walker_GetCurPosition_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Walker_GetCurPosition_result : TBase
    {
      private double _success;

      public double Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public Walker_GetCurPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Double) {
                  Success = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("Walker_GetCurPosition_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Double;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("Walker_GetCurPosition_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RangeFinder_Open_args : TBase
    {

      public RangeFinder_Open_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RangeFinder_Open_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RangeFinder_Open_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RangeFinder_Open_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RangeFinder_Open_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RangeFinder_Open_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RangeFinder_Open_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RangeFinder_Close_args : TBase
    {

      public RangeFinder_Close_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RangeFinder_Close_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RangeFinder_Close_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RangeFinder_Close_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RangeFinder_Close_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RangeFinder_Close_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RangeFinder_Close_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RangeFinder_SetStartPosition_args : TBase
    {
      private double _pos;

      public double Pos
      {
        get
        {
          return _pos;
        }
        set
        {
          __isset.pos = true;
          this._pos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool pos;
      }

      public RangeFinder_SetStartPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case -1:
                if (field.Type == TType.Double) {
                  Pos = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RangeFinder_SetStartPosition_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.pos) {
            field.Name = "pos";
            field.Type = TType.Double;
            field.ID = -1;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Pos);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RangeFinder_SetStartPosition_args(");
        bool __first = true;
        if (__isset.pos) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Pos: ");
          __sb.Append(Pos);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RangeFinder_SetStartPosition_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RangeFinder_SetStartPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RangeFinder_SetStartPosition_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RangeFinder_SetStartPosition_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RangeFinder_SetEndPosition_args : TBase
    {
      private double _pos;

      public double Pos
      {
        get
        {
          return _pos;
        }
        set
        {
          __isset.pos = true;
          this._pos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool pos;
      }

      public RangeFinder_SetEndPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case -1:
                if (field.Type == TType.Double) {
                  Pos = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RangeFinder_SetEndPosition_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.pos) {
            field.Name = "pos";
            field.Type = TType.Double;
            field.ID = -1;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Pos);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RangeFinder_SetEndPosition_args(");
        bool __first = true;
        if (__isset.pos) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Pos: ");
          __sb.Append(Pos);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RangeFinder_SetEndPosition_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RangeFinder_SetEndPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RangeFinder_SetEndPosition_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RangeFinder_SetEndPosition_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RangeFinder_GetPosition_args : TBase
    {

      public RangeFinder_GetPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RangeFinder_GetPosition_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RangeFinder_GetPosition_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RangeFinder_GetPosition_result : TBase
    {
      private double _success;

      public double Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RangeFinder_GetPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Double) {
                  Success = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RangeFinder_GetPosition_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Double;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RangeFinder_GetPosition_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RangeFinder_GetNormalizedPosition_args : TBase
    {

      public RangeFinder_GetNormalizedPosition_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RangeFinder_GetNormalizedPosition_args");
          oprot.WriteStructBegin(struc);
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RangeFinder_GetNormalizedPosition_args(");
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class RangeFinder_GetNormalizedPosition_result : TBase
    {
      private double _success;

      public double Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public RangeFinder_GetNormalizedPosition_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Double) {
                  Success = iprot.ReadDouble();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("RangeFinder_GetNormalizedPosition_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Double;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteDouble(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("RangeFinder_GetNormalizedPosition_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}

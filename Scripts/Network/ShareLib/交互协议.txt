  首先, 展项和控制系统之间的通信是通过自定义的 TCP 协议来完成的. 展项(或总控)作为服务器, 交互端作为客户端.
  客户端和服务器之间的通信通过使用一个简单的封包格式: 4字节长度(网络字节序, 不含自身) + 文本命令,  文本使用 UTF-8 编码
  
  客户端和服务器交互过程:
   1. 客户端连接后发送命令:  $GCP   (Get Current Page)
   2. 服务器回应:  @{JSON格式的界面描述}
   3. 客户端根据界面描述生成界面.
   4. 服务器随时可能发送: 更新整个界面, 更新某个界面元素
   5. 客户端随时发送界面触发的消息给服务器.  


  客户端和服务器传递的文本命令的第一个字符约定了命令的类型:
   $ 界面控制命令
   @ 界面 JSON 格式描述
   * 配置文件 x=y 格式描述
   + 界面元素更新命令
   # 服务器之间的信息交流命令, 客户端收到后需直接忽略
   . 需要客户端自行处理, 不回传给服务器的命令
   ! 二进制资源数据
   字母数字开头  展项内容控制命令

  界面描述的 JSON 内容示例:
   
{
    "title": "示例",           // 页面标题
    "bg": "snow",	       // 页面背景
    "xoffset": 0,              // 页面中所有元素的 x 坐标加上此偏移
    "yoffset": 0,              // 页面中所有元素的 y 坐标加上此偏移
    "hidedef": true/false,  // 隐藏默认的设置/返回按钮
    "slide": {
        "left": "next",	       // 用户在界面空白处向左滑动时执行的命令
        "right": "prev",       //                   右
        "top": "",	       //                   上
        "bottom": ""           //                   下
    },
    "buttons": [               // 页面中包含的按钮列表
    	{
            "id": "button1",                        // ID, 当服务器需要控制某个界面元素状态时传的命令中会包含 ID, 客户端通过此 ID 来找到对应的界面元素
    	    "name": "展厅设备控制",                 // 按钮的名称
            "style": "normal",                      // 按钮的外观风格
            "command": "$GP device",                // 点击按钮时传回给服务器的命令, 如果命令以 . 开头, 则要求客户端自己处理, 不传回给服务器.
            "rect": [300,300,500,80]                // 按钮的左上角位置 x, y 以及宽度和高度. 使用的坐标为左上角作为原点的坐标系, 1920X1200 大小, 不同分辨率的屏幕自行缩放变换坐标.
                                                    // 当然, 客户端也可以完全忽略这个坐标, 自行安排按钮的位置
   	},
        {
            "name": "中移超脑",
            "style": "normal",
            "command": "go SMARTCITY",
            "rect": [200,300,350,70]
        },
        {
            "name": "重放当前视频",
            "style": "normal",
            "command": "seek 0 absolute;set_property pause false",
            "rect": [950,730,400,100]
        },
        {
            "name": "视频控制",
            "style": "normal",
            "command": ".sub 192.168.1.22 3000",   // 以 . 开头的命令由客户端自行处理,  .sub 命令要求客户端重新去连接后面给出的 IP 地址和端口, 从而达到切换展项的目的.
                                                   // .back 命令要求客户端重新连接上一个连接的客户端. 
                                                   // 展项服务器不会保证每个页面上有对应的返回按钮, 客户端最好自行加上一个返回按钮
            "rect": [300,400,500,80]
        },
        
    ],
    "texts": [		     // 页面中的说明文字列表
        {
            "id": "pageinfo",                    // ID
            "text": "",                          // 文本内容
            "aligment": "center",                // 文本水平对齐方式
            "color": [240,233,53],               // 文本使用的颜色
            "rect": [710,988,400,62]
        }
    ],
    "slider": [             // 页面中的滑动条控件, 可以不用支持. 其中 {0} 需要在发送时替换为滑动块当前的百分比.
        {
            "id": "process",
            "style": "normal",
            "command": "seek {0} absolute-percent",
            "rect": [63,900,1800,100]
        }
    ],
    "lists": [              // 页面中的列表控件, 可以不用支持. 其中 {0} 需要在发送时替换为选中的列表条目序号
        {
            "id": "playlist",
            "style": "playlist",
            "command": "set_property playlist-pos {0}",
            "rect": [0,120,1920,300]
        }
    ],
    "lines": [],     // 辅助线
    "images": [],    // 辅助图片
    ... 
}


客户端需要处理的命令

    界面元素更新命令:
     +text <id> <string>    设置指定元素上显示的文字内容, 其中的 string 里空格被替换成了 _, 如果是下划线本身, 则被替换成 &_  替换回去的参考代码: text = text.Replace('_', ' '); text = text.Replace("& ", "_");
     +check <id>            设置指定元素为选中状态. 选中状态的表现方式由客户端自行定义.
     +uncheck <id>          取消指定元素的选中状态
     +swcheck <id1> <id2>   将选中状态从元素 1 切换到元素 2, 等价于 uncheck <id1> 加 check <id2>
     +percent <id> <float>  设置滑动块当前的百分比位置.
     +bg <string>                 替换背景
     +disable_animal_one_shoot       临时禁用一次动画

    客户端自行处理命令:
     .sub ip port  连接子服务器
     .back         返回上一个连接的服务器
     .setting      切换到设置界面
     .backorsetting      返回或设置
     .wol mac1 mac2 ...  发送唤醒主机的 UDP 包
     .wolall             唤醒配置中的主机


服务器需要处理的命令

    页面控制命令:
     $GCP	 获取当前页面配置      Get Current Page
     $GP <name>  切换到指定名字的页面  Goto Page
     $GCF        获取当前配置, 配置将会保存到 Pad 中, 下次重启后仍然有效.
     $RES <name> 获取二进制资源数据, 比如图片等.
                            返回内容 !name\0data

    服务器控制命令:
     #shutdown   关闭此服务器及所有的子服务器
     #reg        注册子展项服务器
     

  